% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/match_params.R
\name{match_params}
\alias{match_params}
\title{Find matching node names}
\usage{
match_params(post, params, ubase = FALSE, auto_escape = TRUE)
}
\arguments{
\item{post}{an object of class \code{mcmc.list}}

\item{params}{a character vector with length >= 1. Passed to \code{stringr::str_detect},
so can, and sometimes should, be a regular expression; see the examples.
Duplicate matches found among different elements of \code{params} are discarded.}

\item{ubase}{logical. Do you wish to return only the unique bases (i.e., without indices listed)?}

\item{auto_escape}{logical. \code{FALSE} will treat \code{"["} and \code{"]"}
as regular expression syntax (unless explicitly escaped by user),
\code{TRUE} will treat these symbols as plain text to be matched.
It is generally recommended to keep this as \code{TRUE} (the default),
unless you are performing complex regex searches that require the
\code{"["} and \code{"]"} symbols to be special characters}
}
\value{
a character vector with all node names that match \code{params}.
  If no matches are found, it will return an error with
  the base node names found the \code{mcmc.list} to help the next try.
}
\description{
Returns all the node names stored in an \code{mcmc.list} object
that match a provided string
}
\details{
this function is called as one of the first steps in many of the more downstream
  functions in this package. It is thus fairly important to get used to
  how the regular expressions work, particularly
  with the \code{\link[stringr]{str_detect}} function.
}
\examples{
\dontrun{
match_params(post, "alpha")
match_params(post, c("S", "R"))         # Elements of  S, S_msy, and Sigma_R, and R
match_params(post, c("R["))             # Elements of R and Sigma_R only
match_params(post, c("^R["))            # Elements of R
match_params(post, c("^R["), ubase = T) # Only the base node name: R
}

}
